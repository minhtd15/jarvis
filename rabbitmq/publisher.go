package rabbitmq

import (
	"context"
	education_website "education-website"
	"education-website/api/response/qlda"
	"encoding/json"
	"fmt"
	"github.com/streadway/amqp"
)

func RabbitMQPublisher(fileData []byte, ctx context.Context, fileType string, classService education_website.ClassService, fileName string) ([]qlda.AutoGenerated, error, *int64) {
	fmt.Println("RabbitMQPublisher")

	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	if err != nil {
		return nil, err, nil
	}

	defer conn.Close()

	fmt.Println("Successfully connected to RabbitMQ")

	ch, err := conn.Channel()
	if err != nil {
		return nil, err, nil
	}
	defer conn.Close()

	var q amqp.Queue
	var fileTypeDoc string
	if fileType == "application/pdf" {
		fileTypeDoc = "pdf"
		q, err = ch.QueueDeclare(
			"pdf",
			false,
			false,
			false,
			false,
			nil,
		)
		if err != nil {
			return nil, err, nil
		}
	} else {
		fileTypeDoc = "docx"
		q, err = ch.QueueDeclare(
			"docx",
			false,
			false,
			false,
			false,
			nil,
		)
		if err != nil {
			return nil, err, nil
		}
	}

	qname, err := classService.UploadDocument(fileData, fileTypeDoc, fileName)
	if err != nil {
		return nil, err, nil
	}

	q1, err := ch.QueueDeclare(
		fmt.Sprintf("%d", *qname),
		false,
		false,
		true,
		false,
		nil,
	)

	msgs, err := ch.Consume(
		q1.Name, // queue
		"",      // consumer
		true,    // auto-ack
		false,   // exclusive
		false,   // no-local
		false,   // no-wait
		nil,     // args
	)

	if err != nil {
		return nil, err, nil
	}
	//fmt.Println(q)

	err = ch.Publish(
		"",
		q.Name,
		false,
		false,
		amqp.Publishing{
			ContentType: "text/plain",
			Body:        fileData,
			ReplyTo:     q1.Name,
		},
	)

	var response []qlda.AutoGenerated
	for d := range msgs {
		var data qlda.AutoGenerated
		err := json.Unmarshal(d.Body, &data)
		if err != nil {
			fmt.Printf("Error decoding JSON: %s, data: %s\n", err)
			return nil, err, nil
		}
		fmt.Printf("Decoded JSON: %v\n", data)
		//if msg, ok := data["message"]; ok && msg == "EOF" {
		//	break
		//}
		response = append(response, data)
		if data.Message == "EOF" || data.Message == "eof" {
			return response, nil, qname
			break
		}
		//return &data, nil
		err = classService.UploadMetadata(data, *qname, ctx)
		if err != nil {
			return nil, err, nil
		}
	}

	fmt.Println("Successfully published message to RabbitMQ")
	return nil, err, nil
}
