package qlda

type FinalMetadata struct {
	Metadata Metadata `json:"metadata"`
	Pnum     int      `json:"pnum"`
	Page     []Page   `json:"page"`
	Message  string   `json:"message"`
}

type Metadata struct {
	Languages string   `json:"languages"`
	Pages     int      `json:"pages"`
	FileType  string   `json:"fileType"`
	PdfToc    []PdfToc `json:"pdf_toc"`
}
type PdfToc struct {
	Title string `json:"title"`
	Level int    `json:"level"`
	Page  int    `json:"page"`
}

type Page struct {
	Page   int           `json:"page"`
	Text   string        `json:"text"`
	Images []interface{} `json:"images"`
	Tables []interface{} `json:"tables"`
}

func MockFinalMetadata() FinalMetadata {
	return FinalMetadata{
		Metadata: Metadata{
			Languages: "English",
			Pages:     10,
			FileType:  "PDF",
			PdfToc: []PdfToc{
				{Title: "Introduction", Level: 1, Page: 1},
				{Title: "Chapter 1", Level: 1, Page: 2},
			},
		},
		Pnum: 1,
		Page: []Page{
			{Page: 1, Text: "Sample text", Images: []interface{}{"image1.jpg"}, Tables: []interface{}{"table1"}},
		},
		Message: "Mock data generated",
	}
}

type AutoGenerated struct {
	Metadata struct {
		Languages interface{} `json:"languages"`
		Pages     int         `json:"pages"`
		Filetype  string      `json:"filetype"`
		PdfToc    []struct {
			Title string `json:"title"`
			Level int    `json:"level"`
			Page  int    `json:"page"`
		} `json:"pdf_toc"`
	} `json:"metadata,omitempty"`
	Pnum int `json:"pnum,omitempty"`
	Page struct {
		Page   int     `json:"page"`
		Text   string  `json:"text"`
		Images []Image `json:"images"`
		Tables []Table `json:"tables"`
	} `json:"page,omitempty"`
	Message string `json:"message"`
}

type Image struct {
	Name    string `json:"name"`
	Content string `json:"content"`
}

type Table struct {
	Content    string `json:"content"`
	TableIndex int    `json:"table_index"`
}

type Hello struct {
	Contents []struct {
		Parts []struct {
			Text       string `json:"text,omitempty"`
			InlineData struct {
				MimeType string `json:"mime_type"`
				Data     string `json:"data"`
			} `json:"inline_data,omitempty"`
		} `json:"parts"`
	} `json:"contents"`
}

type Gemini struct {
	Contents []Content `json:"contents"`
}

type Content struct {
	Parts []Parts `json:"parts"`
}

type Parts struct {
	Text       string      `json:"text,omitempty"`
	InlineData *InlineData `json:"inline_data,omitempty"`
}

type InlineData struct {
	MimeType string `json:"mime_type,omitempty"`
	Data     string `json:"data,omitempty"`
}

type Md_table struct {
	Content    string `db:"content"`
	TableIndex int    `db:"table_index"`
}

type ImageDb struct {
	Name    string `db:"name"`
	Content string `db:"content"`
}
